<?php

namespace Database\Factories;

use App\Models\Asset;
use App\Models\AssetCategory;
use App\Models\AssetType;
use App\Models\AssetLocation;
use App\Models\SubLocation;
use App\Models\Region;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\AssetItem>
 */
class AssetItemFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'asset_id' => Asset::factory(),
            'asset_number' => null, // Will be auto-generated by the model
            
            // AssetItem specific fields
            'item_name' => $this->faker->words(3, true),
            'description' => $this->faker->sentence(),
            'serial_number' => $this->faker->unique()->regexify('[A-Z0-9]{12}'), // Moved here - belongs to asset_items
            'model_number' => $this->faker->regexify('[A-Z0-9]{6}'),
            'manufacturer' => $this->faker->company(),
            'quantity' => $this->faker->randomFloat(2, 1, 100),
            'unit_of_measure' => $this->faker->randomElement(['pcs', 'units', 'boxes', 'kg', 'liters']),
            'unit_cost' => $this->faker->randomFloat(2, 10, 1000),
            'total_cost' => null, // Will be calculated
            'condition' => $this->faker->randomElement(['good', 'fair', 'poor', 'damaged']),
            'location_details' => $this->faker->sentence(),
            'expiry_date' => $this->faker->optional(0.3)->dateTimeBetween('now', '+2 years'),
            'is_active' => $this->faker->boolean(80), // 80% chance of being active
            'notes' => $this->faker->optional(0.4)->sentence(),
            
            // Fields from Asset model (excluding acquisition_date, fund_source_id, and serial_number)
            'uuid' => $this->faker->uuid(),
            'tag_no' => $this->faker->unique()->regexify('[A-Z0-9]{8}'),
            'asset_tag' => $this->faker->unique()->regexify('[A-Z0-9]{10}'),
            'asset_category_id' => AssetCategory::factory(),
            'type_id' => AssetType::factory(),
            'serial_no' => $this->faker->optional()->regexify('[A-Z0-9]{8}'),
            'item_description' => $this->faker->optional()->sentence(),
            'person_assigned' => $this->faker->optional()->name(),
            'asset_location_id' => AssetLocation::factory(),
            'assigned_to' => User::factory(),
            'region_id' => Region::factory(),
            'sub_location_id' => SubLocation::factory(),
            'has_warranty' => $this->faker->boolean(30), // 30% chance of having warranty
            'has_documents' => $this->faker->boolean(40), // 40% chance of having documents
            'asset_warranty_start' => $this->faker->optional(0.3)->dateTimeBetween('-1 year', 'now'),
            'asset_warranty_end' => $this->faker->optional(0.3)->dateTimeBetween('now', '+2 years'),
            'warranty_start' => $this->faker->optional(0.3)->dateTimeBetween('-1 year', 'now'),
            'warranty_months' => $this->faker->optional(0.3)->numberBetween(12, 60),
            'maintenance_interval_months' => $this->faker->optional(0.4)->numberBetween(3, 24),
            'last_maintenance_at' => $this->faker->optional(0.6)->dateTimeBetween('-1 year', 'now'),
            'purchase_date' => $this->faker->optional(0.7)->dateTimeBetween('-3 years', 'now'),
            'cost' => $this->faker->optional(0.8)->randomFloat(2, 100, 10000),
            'supplier' => $this->faker->optional(0.6)->company(),
            'transfer_date' => $this->faker->optional(0.2)->dateTimeBetween('-1 year', 'now'),
            'status' => $this->faker->randomElement(['active', 'in_use', 'maintenance', 'retired', 'disposed', 'pending_approval']),
            'original_value' => $this->faker->optional(0.7)->randomFloat(2, 100, 10000),
            'submitted_for_approval' => $this->faker->boolean(20), // 20% chance of being submitted for approval
            'submitted_at' => $this->faker->optional(0.2)->dateTimeBetween('-1 month', 'now'),
            'submitted_by' => User::factory(),
            'sub_location' => $this->faker->optional(0.4)->word(),
            'metadata' => [
                'warranty_info' => $this->faker->optional()->sentence(),
                'maintenance_notes' => $this->faker->optional()->sentence(),
                'custom_fields' => $this->faker->optional()->words(3),
                'technical_specs' => $this->faker->optional()->words(5),
                'installation_notes' => $this->faker->optional()->sentence(),
            ],
        ];
    }

    /**
     * Indicate that the asset item is in good condition.
     */
    public function goodCondition(): static
    {
        return $this->state(fn (array $attributes) => [
            'condition' => 'good',
        ]);
    }

    /**
     * Indicate that the asset item is damaged.
     */
    public function damaged(): static
    {
        return $this->state(fn (array $attributes) => [
            'condition' => 'damaged',
        ]);
    }

    /**
     * Indicate that the asset item is expired.
     */
    public function expired(): static
    {
        return $this->state(fn (array $attributes) => [
            'expiry_date' => $this->faker->dateTimeBetween('-1 year', '-1 day'),
        ]);
    }

    /**
     * Indicate that the asset item is expiring soon.
     */
    public function expiringSoon(): static
    {
        return $this->state(fn (array $attributes) => [
            'expiry_date' => $this->faker->dateTimeBetween('now', '+30 days'),
        ]);
    }

    /**
     * Indicate that the asset item is inactive.
     */
    public function inactive(): static
    {
        return $this->state(fn (array $attributes) => [
            'is_active' => false,
        ]);
    }

    /**
     * Indicate that the asset item has warranty.
     */
    public function withWarranty(): static
    {
        return $this->state(fn (array $attributes) => [
            'has_warranty' => true,
            'asset_warranty_start' => $this->faker->dateTimeBetween('-6 months', 'now'),
            'asset_warranty_end' => $this->faker->dateTimeBetween('now', '+2 years'),
        ]);
    }

    /**
     * Indicate that the asset item needs maintenance.
     */
    public function needsMaintenance(): static
    {
        return $this->state(fn (array $attributes) => [
            'maintenance_interval_months' => 6,
            'last_maintenance_at' => $this->faker->dateTimeBetween('-8 months', '-7 months'),
        ]);
    }

    /**
     * Indicate that the asset item is in maintenance status.
     */
    public function inMaintenance(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'maintenance',
        ]);
    }

    /**
     * Indicate that the asset item is pending approval.
     */
    public function pendingApproval(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'pending_approval',
            'submitted_for_approval' => true,
            'submitted_at' => now(),
        ]);
    }
}
