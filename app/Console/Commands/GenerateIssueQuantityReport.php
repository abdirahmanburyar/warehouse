<?php

namespace App\Console\Commands;

use App\Models\IssuedQuantity;
use App\Models\IssueQuantityReport;
use App\Models\IssueQuantityItem;
use Carbon\Carbon;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class GenerateIssueQuantityReport extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'report:issue-quantities {--month= : The month in YYYY-MM format} {--force : Force regenerate the report even if it already exists}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate a monthly report of issued quantities';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('Starting monthly issued quantities report generation...');

        // Get the month to process (either from argument or previous month)
        $monthArg = $this->option('month');
        $force = $this->option('force');
        $today = Carbon::now();
        $isFirstDayOfMonth = $today->day === 1;

        if ($monthArg) {
            // Validate the format
            if (!preg_match('/^\d{4}-\d{2}$/', $monthArg)) {
                $this->error('Invalid month format. Please use YYYY-MM format.');
                return 1;
            }
            $month = $monthArg;
        } else {
            // Default to previous month
            $month = Carbon::now()->subMonth()->format('Y-m');
            
            // Log whether this is running on the first day of the month
            if ($isFirstDayOfMonth) {
                $this->info("Running on the first day of the month: {$today->format('Y-m-d')}");
                $this->info("Automatically generating report for previous month: {$month}");
            } else {
                $this->info("Not running on the first day of the month. Current date: {$today->format('Y-m-d')}");
                $this->info("Still generating report for previous month: {$month}");
            }
        }

        $this->info("Generating report for month: {$month}");

        // Check if report already exists for this month
        $existingReport = IssueQuantityReport::where('month_year', $month)->first();

        if ($existingReport && !$force) {
            $this->warn("A report for {$month} already exists. Use --force to regenerate.");
            return 0;
        }

        // Begin transaction
        DB::beginTransaction();

        try {
            // Delete existing report if force option is used
            if ($existingReport && $force) {
                $this->info("Removing existing report for {$month}...");
                IssueQuantityItem::where('parent_id', $existingReport->id)->delete();
                $existingReport->delete();
            }

            // Create a new monthly report
            $report = new IssueQuantityReport();
            $report->month_year = $month;
            $report->generated_by = 'Generated by the System';
            $report->total_quantity = 0; // Initialize total quantity, will update after processing all items
            $report->save();

            $this->info("Created monthly report record with ID: {$report->id}");

            // Get the start and end dates for the month
            $startDate = Carbon::parse($month . '-01 00:00:00');
            $endDate = Carbon::parse($month . '-01 23:59:59')->endOfMonth();

            // Get all issued quantities for the month
            $issuedQuantities = IssuedQuantity::whereBetween('issued_date', [$startDate, $endDate])
                ->with('warehouse')
                ->get();

            $this->info("Found {$issuedQuantities->count()} issued quantities for {$month}");
            
            // Show unique warehouses being processed
            $uniqueWarehouses = $issuedQuantities->pluck('warehouse_id')->unique();
            $this->info("Processing data for " . $uniqueWarehouses->count() . " warehouse(s): " . $uniqueWarehouses->implode(', '));

            $bar = $this->output->createProgressBar(count($issuedQuantities));
            $bar->start();
            
            $totalQuantity = 0;

            foreach ($issuedQuantities as $issuedQuantity) {
                // Skip if warehouse_id is null (log warning)
                if (is_null($issuedQuantity->warehouse_id)) {
                    $this->warn("Skipping issued quantity ID {$issuedQuantity->id} - no warehouse_id specified");
                    $bar->advance();
                    continue;
                }

                // Try to find existing item with the same parent_id, product_id, and warehouse_id
                $item = IssueQuantityItem::where('parent_id', $report->id)
                    ->where('product_id', $issuedQuantity->product_id)
                    ->where('warehouse_id', $issuedQuantity->warehouse_id)
                    ->first();
            
                if ($item) {
                    // If found, update quantity
                    $item->quantity += $issuedQuantity->quantity;
                    $item->save();
                } else {
                    // Otherwise, create a new row
                    IssueQuantityItem::create([
                        'parent_id' => $report->id,
                        'product_id' => $issuedQuantity->product_id,
                        'warehouse_id' => $issuedQuantity->warehouse_id,
                        'quantity' => $issuedQuantity->quantity,
                    ]);
                }
            
                // Add to total quantity
                $totalQuantity += $issuedQuantity->quantity;
            
                $bar->advance();
            }
            

            $bar->finish();
            $this->newLine(2);
            
            // Update the monthly report with the total quantity
            $report->total_quantity = $totalQuantity;
            $report->save();
            
            $this->info("Total quantity for this month: {$totalQuantity}");

            // Show summary by warehouse
            $this->showWarehouseSummary($report->id);

            // Commit the transaction
            DB::commit();

            $this->info("\nSuccessfully generated monthly issued quantities report for {$month}");
            $this->info("Total items processed: {$issuedQuantities->count()}");

            return 0;
        } catch (\Exception $e) {
            // Rollback the transaction if an error occurs
            DB::rollBack();

            $this->error("An error occurred while generating the report: {$e->getMessage()}");
            $this->error($e->getTraceAsString());

            return 1;
        }
    }

    /**
     * Show summary of issued quantities by warehouse
     */
    private function showWarehouseSummary($reportId)
    {
        $this->info("\n" . str_repeat("=", 80));
        $this->info("WAREHOUSE SUMMARY");
        $this->info(str_repeat("=", 80));

        // Get warehouse summary from issue quantity items
        $warehouseSummary = IssueQuantityItem::where('parent_id', $reportId)
            ->with('warehouse')
            ->selectRaw('warehouse_id, SUM(quantity) as total_quantity, COUNT(*) as product_count')
            ->groupBy('warehouse_id')
            ->get();

        foreach ($warehouseSummary as $summary) {
            $warehouseName = $summary->warehouse ? $summary->warehouse->name : 'Unknown Warehouse';
            $this->info("\nWarehouse: {$warehouseName} (ID: {$summary->warehouse_id})");
            $this->info("  Total Quantity Issued: " . number_format($summary->total_quantity));
            $this->info("  Products Count: {$summary->product_count}");
        }

        $this->info("\n" . str_repeat("=", 80));
        $this->info("Total Warehouses: {$warehouseSummary->count()}");
        $this->info("Total Quantity: " . number_format($warehouseSummary->sum('total_quantity')));
        $this->info(str_repeat("=", 80));
    }
}
